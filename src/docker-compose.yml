version: "3.1"
networks:
  default:
    name: IoTnet
volumes:
  npm-cache:
    external: false
services:
  serviceregistry:
    build: ./service-registry
    container_name: serviceregistry
    volumes:
      - npm-cache:/root/.npm
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - SERVICE_REGISTRY_PORT=${SERVICE_REGISTRY_PORT}
    ports:
      - ${SERVICE_REGISTRY_PORT}:${SERVICE_REGISTRY_PORT}
    depends_on: 
      - redis
    restart: always
  resourcemanager:
    build: ./resource-manager
    container_name: resourcemanager
    volumes:
      - npm-cache:/root/.npm
    environment:
      - SERVICE_REGISTRY_HOST=${SERVICE_REGISTRY_HOST}
      - SERVICE_REGISTRY_PORT=${SERVICE_REGISTRY_PORT}
      - RESOURCE_MANAGER_PORT=${RESOURCE_MANAGER_PORT}
    ports:
      - ${RESOURCE_MANAGER_PORT}:${RESOURCE_MANAGER_PORT}
    depends_on:
      - serviceregistry
    restart: always
  datamanager:
    build: ./data-manager
    container_name: datamanager
    volumes:
      - npm-cache:/root/.npm
    environment:
      - SERVICE_REGISTRY_HOST=${SERVICE_REGISTRY_HOST}
      - SERVICE_REGISTRY_PORT=${SERVICE_REGISTRY_PORT}
      - DATA_MANAGER_PORT=${DATA_MANAGER_PORT}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
      - RABBITMQ_SUBSCRIBER_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_SUBSCRIBER_PASSWORD=${RABBITMQ_DEFAULT_PASS}
    ports:
      - ${DATA_MANAGER_PORT}:${DATA_MANAGER_PORT}
    depends_on:
      - serviceregistry
      - rabbitmq
    restart: always
  actionmanager:
    build: ./action-manager
    container_name: actionmanager
    volumes:
      - npm-cache:/root/.npm
    environment:
      - SERVICE_REGISTRY_HOST=${SERVICE_REGISTRY_HOST}
      - SERVICE_REGISTRY_PORT=${SERVICE_REGISTRY_PORT}
      - ACTION_MANAGER_PORT=${ACTION_MANAGER_PORT}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
      - RABBITMQ_PUBLISHER_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PUBLISHER_PASSWORD=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_SUBSCRIBER_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_SUBSCRIBER_PASSWORD=${RABBITMQ_DEFAULT_PASS}
    ports:
      - ${ACTION_MANAGER_PORT}:${ACTION_MANAGER_PORT}
    depends_on:
      - serviceregistry
      - rabbitmq
    restart: always
  servicecataloger:
    build: ./service-cataloger
    container_name: servicecataloger
    volumes:
      - ./service-cataloger:/usr/service-cataloger
      - npm-cache:/root/.npm
    environment:
      - SERVICE_REGISTRY_HOST=${SERVICE_REGISTRY_HOST}
      - SERVICE_REGISTRY_PORT=${SERVICE_REGISTRY_PORT}
      - SERVICE_CATALOGER_PORT=${SERVICE_CATALOGER_PORT}
    ports:
      - ${SERVICE_CATALOGER_PORT}:${SERVICE_CATALOGER_PORT}
    depends_on:
      - serviceregistry
    restart: always
  inputcommunicator:
    build: ./input-communicator
    container_name: inputcommunicator
    volumes:
      - ./input-communicator:/usr/input-communicator
      - npm-cache:/root/.npm
    environment:
      - SERVICE_REGISTRY_HOST=${SERVICE_REGISTRY_HOST}
      - SERVICE_REGISTRY_PORT=${SERVICE_REGISTRY_PORT}
      - INPUT_COMMUNICATOR_PORT=${INPUT_COMMUNICATOR_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
      - AMQP_HOST=${AMQP_HOST}
      - AMQP_PORT=${AMQP_PORT}
      - RABBITMQ_PUBLISHER_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PUBLISHER_PASSWORD=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_SUBSCRIBER_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_SUBSCRIBER_PASSWORD=${RABBITMQ_DEFAULT_PASS}
    ports:
      - ${INPUT_COMMUNICATOR_PORT}:${INPUT_COMMUNICATOR_PORT}
      - 5683:5683/udp
    depends_on:
      - serviceregistry
      - redis
      - rabbitmq
    restart: always
  actioncommunicator:
    build: ./action-communicator
    container_name: actioncommunicator
    volumes:
      - npm-cache:/root/.npm
    environment:
      - SERVICE_REGISTRY_HOST=${SERVICE_REGISTRY_HOST}
      - SERVICE_REGISTRY_PORT=${SERVICE_REGISTRY_PORT}
      - ACTION_COMMUNICATOR_PORT=${ACTION_COMMUNICATOR_PORT}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
      - AMQP_HOST=${AMQP_HOST}
      - AMQP_PORT=${AMQP_PORT}
      - RABBITMQ_PUBLISHER_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PUBLISHER_PASSWORD=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_SUBSCRIBER_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_SUBSCRIBER_PASSWORD=${RABBITMQ_DEFAULT_PASS}
    ports:
      - ${ACTION_COMMUNICATOR_PORT}:${ACTION_COMMUNICATOR_PORT}
    depends_on:
      - serviceregistry
      - rabbitmq
    restart: always
  rabbitmq:
    build: ./rabbitmq
    container_name: rabbitmq
    volumes:
      - ./rabbitmq/etc/:/etc/rabbitmq/
      - ./rabbitmq/data/:/var/lib/rabbitmq/
      - ./rabbitmq/logs/:/var/log/rabbitmq/
    environment:
      - RABBITMQ_PID_FILE=/var/lib/rabbitmq/mnesia/rabbitmq
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_DEFAULT_PASS}
    ports:
      - 5672:5672   # AMQP
      - 15672:15672 # Interface web HTTP 
      - 1883:1883   # MQTT
    restart: always
  
  redis:
    image: redis:alpine
    build: ./redis
    container_name: redis
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    restart: always

#  ONLY FOR TESTS
  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - PORT=${REDIS_COMMANDER_PORT}
      - REDIS_HOSTS=local:${REDIS_HOST}:${REDIS_PORT}
    ports:
      - ${REDIS_COMMANDER_PORT}:${REDIS_COMMANDER_PORT}
    depends_on: 
      - redis
  
  mongo:
    image: mongo
    build: ./mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASS}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    volumes: 
      - /etc/timezone:/etc/timezone:ro  #sincroniza timezone com o pc hospedeiro
      - ./mongo/db_data/:/data/db/ # diretorio do pc hospedeiro onde ser√£o persistidos os dados
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js

#  ONLY FOR TESTS
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - ${MONGO_EXPRESS_PORT}:${MONGO_EXPRESS_PORT}
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASS}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASS}@mongo:${MONGO_PORT}/
    depends_on:
      - mongo      
 
# ONLY FOR TESTS
#   wireshark:
#     image: lscr.io/linuxserver/wireshark:latest
#     container_name: wireshark
#     cap_add:
#       - NET_ADMIN
#     security_opt:
#       - seccomp:unconfined #optional
#     network_mode: host
#     environment:
#       - PUID=1000
#       - PGID=1000
#       - TZ=America/Araguaina
#     volumes:
#       - ./.docker/wireshark/etc/:/etc/wireshark/config
#     ports:
#       - 3000:3000
#     restart: unless-stopped